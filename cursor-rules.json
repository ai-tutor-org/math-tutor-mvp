{
    "rules": [
        {
            "name": "React Best Practices (React 18+)",
            "description": "Follow modern React hooks and component patterns",
            "rules": [
                "Always use functional components with hooks (no class components)",
                "Use React.StrictMode for development debugging",
                "Wrap event handlers in useCallback when passed as props to prevent re-renders",
                "Use useImperativeHandle with forwardRef for component APIs (still current standard)",
                "Prefer useState over useReducer for simple state management",
                "Clean up effects with return functions in useEffect to prevent memory leaks",
                "Use useMemo for expensive calculations only, not for object creation",
                "Always provide dependency arrays for useEffect and useCallback",
                "Use React 18's automatic batching (no need for unstable_batchedUpdates)",
                "Avoid using deprecated lifecycle methods or legacy context API"
            ]
        },
        {
            "name": "Data-Driven Architecture",
            "description": "Maintain centralized content structure",
            "rules": [
                "All lesson content must be defined in src/contentData.js",
                "All tutor speech must use tutorText property for audio generation",
                "Use descriptive alphanumeric IDs for interactions (e.g., 'welcome', 'measure-notebook')",
                "ContentComponent should be prioritized over componentMap in rendering - allows direct component specification in data vs generic type lookup",
                "Pass contentProps directly to components, not as nested objects - components expect individual props (shape='rectangle') not contentProps={{shape: 'rectangle'}}",
                "Maintain consistent interaction structure: id, tutorText, transitionType, showNextButton, nextButtonText",
                "Use conditional presentations for branching logic (correctFeedback/incorrectFeedback patterns)"
            ]
        },
        {
            "name": "TTS and Audio Management",
            "description": "Handle text-to-speech consistently",
            "rules": [
                "Use TTSManager with forwardRef and triggerTTS for direct control (forwardRef is still current React 18+ standard)",
                "Clear dynamicTutorText when advancing to prevent voice overlap",
                "Use import.meta.env.BASE_URL for audio path resolution (Vite environment variable)",
                "Handle onvoiceschanged event for browser TTS compatibility",
                "Implement synth.pause() and synth.resume() workaround for long speeches",
                "Use useImperativeHandle to expose triggerTTS method for dynamic speech",
                "Implement audio mapping fallback system for production deployments"
            ]
        },
        {
            "name": "Animation and Interaction Timing",
            "description": "Coordinate animations with speech and user actions",
            "rules": [
                "Trigger animations in handleTTSEnd only for specific interaction types",
                "Use transitionType: 'auto' for automatic advancement, 'manual' for user action",
                "Wrap animation handlers in useCallback to prevent unnecessary re-renders",
                "Use Framer Motion for complex interactions (drag, rotate, resize)",
                "Implement proper cleanup for animation listeners"
            ]
        },
        {
            "name": "CSS and Styling",
            "description": "Maintain consistent styling approach",
            "rules": [
                "Use box-sizing: border-box globally for consistent layouts",
                "Prefer CSS modules or component-specific CSS files",
                "Use Material-UI components for UI framework consistency",
                "Implement responsive design with flexbox and grid",
                "Use absolute positioning sparingly, prefer flexbox for layout"
            ]
        },
        {
            "name": "State Management Patterns",
            "description": "Handle complex state interactions",
            "rules": [
                "Use presentation-level state for lesson progression (currentPresIndex, currentInteractionIndex)",
                "Use component-level state for interaction-specific data",
                "Pass navigation functions down rather than calling them directly in components",
                "Handle conditional flows with navigateToInteraction helper",
                "Clear temporary state (dynamicTutorText, animationTrigger) on transitions"
            ]
        },
        {
            "name": "Error Handling and Debugging",
            "description": "Implement robust error handling",
            "rules": [
                "Always check for undefined properties before accessing nested objects",
                "Use optional chaining (?.) for potentially undefined references",
                "Implement fallbacks for audio and animation failures",
                "Log meaningful error messages with context",
                "Handle edge cases in user interactions gracefully"
            ]
        },
        {
            "name": "Performance Optimization",
            "description": "Optimize for smooth user experience",
            "rules": [
                "Use useMotionValue for smooth Framer Motion animations",
                "Implement proper drag constraints and snap behaviors",
                "Avoid unnecessary re-renders with proper dependency arrays",
                "Use React.memo for components that don't need frequent updates",
                "Optimize SVG assets and use appropriate image formats"
            ]
        },
        {
            "name": "File Organization",
            "description": "Maintain clean project structure",
            "rules": [
                "Keep components in src/components/ with matching CSS files",
                "Store static assets in public/assets/ and public/images/",
                "Use barrel exports in src/components/index.js",
                "Keep lesson data centralized in src/contentData.js",
                "Use descriptive file names that match component names"
            ]
        },
        {
            "name": "Git and Development Workflow",
            "description": "Maintain version control best practices",
            "rules": [
                "Ignore build artifacts and environment-specific files",
                "Include virtual environment patterns in .gitignore",
                "Make atomic commits with clear, descriptive messages",
                "Test changes locally before committing",
                "Keep sensitive configuration out of version control"
            ]
        },
        {
            "name": "Accessibility and User Experience",
            "description": "Ensure inclusive and intuitive interfaces",
            "rules": [
                "Provide visual feedback for all interactive elements",
                "Implement proper focus management for keyboard navigation",
                "Use semantic HTML elements where appropriate",
                "Ensure sufficient color contrast for readability",
                "Provide alternative text for images and icons"
            ]
        },
        {
            "name": "Physics and Game Mechanics",
            "description": "Implement realistic and engaging interactions",
            "rules": [
                "Use Matter.js for realistic physics simulations",
                "Implement smooth drag-and-drop with proper constraints",
                "Add snap-to behaviors for improved user experience",
                "Use appropriate easing functions for animations",
                "Provide clear visual feedback for user actions",
                "Consider Pixi.js for advanced graphics rendering if needed in future"
            ]
        },
        {
            "name": "Future Technology Considerations",
            "description": "Technologies to consider for project evolution",
            "rules": [
                "TypeScript: Better type safety, currently using JS/JSX",
                "Pixi.js: Advanced 2D graphics if we need complex visualizations",
                "React Testing Library: Component testing framework",
                "Storybook: Component documentation and testing",
                "ESLint + Prettier: Code formatting and linting automation"
            ]
        }
    ],
    "filePatterns": {
        "*.jsx": [
            "Use functional components with hooks (React 18+ standard)",
            "Import React at the top when using JSX",
            "Use descriptive prop names and destructure at component top",
            "Handle loading and error states appropriately",
            "Consider TypeScript migration for larger components in future"
        ],
        "*.tsx": [
            "TypeScript + JSX files (not currently used but future consideration)",
            "Would provide better type safety and IDE support",
            "Vite supports TS out of the box if we decide to migrate"
        ],
        "*.css": [
            "Use consistent naming conventions (kebab-case or camelCase)",
            "Organize styles logically (layout, typography, colors, interactions)",
            "Use CSS custom properties for theme values",
            "Implement responsive design with mobile-first approach"
        ],
        "contentData.js": [
            "Maintain consistent interaction structure",
            "Use descriptive IDs for global uniqueness",
            "Include all tutor text as tutorText properties",
            "Define clear transition types and button behaviors"
        ],
        "*.json": [
            "Validate JSON syntax before committing",
            "Use consistent indentation (2 spaces)",
            "Keep configuration files well-documented"
        ]
    },
    "technologies": {
        "React": "v18+ with hooks, functional components, StrictMode",
        "JavaScript": "ES6+ with JSX (not TypeScript currently)",
        "Vite": "Build tool with HMR and environment variables",
        "Framer Motion": "Advanced animations, drag, rotate, resize",
        "Matter.js": "2D physics engine for realistic interactions",
        "Material-UI": "React component library for consistent UI",
        "React Router": "Client-side routing and navigation",
        "Web Speech API": "Browser text-to-speech with fallbacks",
        "React Icons": "Icon library for consistent iconography"
    },
    "codeStyle": {
        "indentation": "2 spaces",
        "quotes": "single for JS, double for JSX attributes",
        "semicolons": "required",
        "trailingCommas": "es5",
        "maxLineLength": 100
    }
}